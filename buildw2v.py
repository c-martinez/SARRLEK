"""Build word2vec model.

Usage:
  buildw2v.py --in=<infile> --out=<outmodel> --vectors=<vecfile>

Options:
  --in=<infile>        Input file with cleaned radiology reports (as generated by `cleaning.py`)
  --out=<outfile>      Output word2vec model
  --vectors=<vecfile>  Output vector representation of reports
"""
from docopt import docopt

import pandas as pd
import chardet
import csv

from gensim.models.doc2vec import Doc2Vec, TaggedDocument

if __name__ == '__main__':
    arguments = docopt(__doc__)

    cleanDatafile = arguments['--in']
    modelfile = arguments['--out']
    vectorfile = arguments['--vectors']

    print('Loading data...')
    rawfile = open(cleanDatafile, 'rb').read()
    encodeInfo = chardet.detect(rawfile[:10000])
    df_cases = pd.read_csv(cleanDatafile, encoding=encodeInfo['encoding'], names=['id', 'normalized'])
    df_cases = df_cases.fillna('')

    print('Preparing sentences...')
    cases = df_cases['normalized'].tolist()
    sentences = [ case.split() for case in cases]

    print('Training w2v model...')
    documents = [TaggedDocument(doc, [i]) for i, doc in enumerate(sentences)]
    model = Doc2Vec(documents, vector_size=300, min_count=1, workers=4, epochs=50)

    print('Saving model...')
    model.save(modelfile)

    print('Saving vectors...')
    df_cases['vectors'] = df_cases['normalized'].apply(lambda text: model.infer_vector(text.split()))
    df_cases.to_csv(vectorfile, columns=['id', 'vectors'], header=False, index=False, quoting=csv.QUOTE_NONNUMERIC)
