"""Build word2vec model.

Usage:
  buildw2v.py --in=<infile> --out=<outmodel> --vectors=<vecfile>

Options:
  --in=<infile>        Input file with cleaned radiology reports (as generated by `cleaning.py`)
  --out=<outfile>      Output word2vec model
  --vectors=<vecfile>  Output vector representation of reports
"""
from docopt import docopt

import chardet
import csv

from gensim.models.doc2vec import Doc2Vec, TaggedDocument
from helpers import SentenceIterator

VECTOR_SIZE = 300

if __name__ == '__main__':
    arguments = docopt(__doc__)

    cleanDatafile = arguments['--in']
    modelfile = arguments['--out']
    vectorfile = arguments['--vectors']

    print('Loading data...')
    rawfile = open(cleanDatafile, 'rb').read()
    encodeInfo = chardet.detect(rawfile[:50000])
    print('encodeInfo: ',encodeInfo)

    print('Preparing documents iterator...')
    documents = SentenceIterator(cleanDatafile, encoding=encodeInfo['encoding'],
                            row2record=lambda row, index: TaggedDocument(row[1].split(), [index]))

    print('Training w2v model...')
    model = Doc2Vec(documents, vector_size=VECTOR_SIZE, min_count=1, workers=4, epochs=50)

    print('Saving model...')
    model.save(modelfile)

    print('Saving vectors...')
    idx_documents = SentenceIterator(cleanDatafile, encoding=encodeInfo['encoding'],
                            row2record=lambda row, index: (row[0], row[1].split()))
    with open(vectorfile, 'w') as csvfile:
        writer = csv.writer(csvfile, quoting=csv.QUOTE_NONNUMERIC)
        for idx, doc in idx_documents:
            vector = model.infer_vector(doc)
            writer.writerow([int(idx), vector])
