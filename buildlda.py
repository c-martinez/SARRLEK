"""Build LDA topic model.

Usage:
  buildlda.py --in=<infile> --out-dict=<dictfile> --out-model=<ldafile> --out-topics=<vecfile>

Options:
  --in=<infile>           Input file with cleaned radiology reports (as generated by `cleaning.py`)
  --out-model=<ldafile>   Output LDA topic model
  --out-topics=<vecfile>  Output topics observed in reports
"""
from docopt import docopt

import pandas as pd
import chardet
import csv

from gensim.corpora.dictionary import Dictionary
from gensim.matutils import sparse2full
from gensim.models import LdaModel

def getLDATopics(text, corpusdict, ldamodel):
    doc = corpusdict.doc2bow(text.split())
    topics_sp = ldamodel.get_document_topics(doc)
    topics = sparse2full(topics_sp, nTopics)
    return topics

if __name__ == '__main__':
    arguments = docopt(__doc__)

    cleanDatafile = arguments['--in']
    # dictfile = arguments['--out-dict']
    ldafile = arguments['--out-model']
    ldavectorfile = arguments['--out-topics']

    print('Loading data...')
    rawfile = open(cleanDatafile, 'rb').read()
    encodeInfo = chardet.detect(rawfile[:10000])
    df_cases = pd.read_csv(cleanDatafile, encoding=encodeInfo['encoding'], names=['id', 'normalized'])
    df_cases = df_cases.fillna('')

    cases = df_cases['normalized'].tolist()
    sentences = [ case.split() for case in cases]

    # Create a corpus from a list of texts
    print('Creating dictionary...')
    cases_dict = Dictionary(sentences)
    cases_corpus = [cases_dict.doc2bow(text) for text in sentences]
    # cases_dict.save(dictfile)

    # Train the model on the corpus.
    print('Training LDA topic model...')
    nTopics = 50
    lda = LdaModel(cases_corpus, num_topics=nTopics)
    lda.save(ldafile)

    print('Building LDA topics...')
    df_cases['ldaTopics'] = df_cases['normalized'].apply(
            lambda text: getLDATopics(text, cases_dict, lda)
        )
    df_cases.to_csv(ldavectorfile, columns=['id', 'ldaTopics'], header=False, index=False, quoting=csv.QUOTE_NONNUMERIC)
