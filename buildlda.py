"""Build LDA topic model.

Usage:
  buildlda.py --in=<infile> --out-dict=<dictfile> --out-model=<ldafile> --out-topics=<vecfile>

Options:
  --in=<infile>           Input file with cleaned radiology reports (as generated by `cleaning.py`)
  --out-dict=<dictfile>   Output dictionary of terms used in reports
  --out-model=<ldafile>   Output LDA topic model
  --out-topics=<vecfile>  Output topics observed in reports
"""
from docopt import docopt

import chardet
import csv

from gensim.corpora.dictionary import Dictionary
from gensim.matutils import sparse2full
from gensim.models import LdaModel
from helpers import SentenceIterator

N_TOPICS = 50

def getLDATopics(text, corpusdict, ldamodel):
    doc = corpusdict.doc2bow(text.split())
    topics_sp = ldamodel.get_document_topics(doc)
    topics = sparse2full(topics_sp, N_TOPICS)
    return topics

if __name__ == '__main__':
    arguments = docopt(__doc__)

    cleanDatafile = arguments['--in']
    dictfile = arguments['--out-dict']
    ldafile = arguments['--out-model']
    ldavectorfile = arguments['--out-topics']

    print('Loading data...')
    rawfile = open(cleanDatafile, 'rb').read()
    encodeInfo = chardet.detect(rawfile[:50000])

    sentences = SentenceIterator(cleanDatafile, encoding=encodeInfo['encoding'],
                            row2record=lambda row, index: row[1].split())

    # Create a corpus from a list of texts
    print('Creating dictionary...')
    cases_dict = Dictionary(sentences)
    cases_dict.save(dictfile)

    # Train the model on the corpus.
    print('Training LDA topic model...')
    cases_corpus = SentenceIterator(cleanDatafile, encoding=encodeInfo['encoding'],
                            row2record=lambda row, index: cases_dict.doc2bow(row[1].split()))

    lda = LdaModel(cases_corpus, num_topics=N_TOPICS)
    lda.save(ldafile)

    print('Building LDA topics...')
    idx_documents = SentenceIterator(cleanDatafile, encoding=encodeInfo['encoding'],
                            row2record=lambda row, index: (row[0], row[1]))

    with open(ldavectorfile, 'w') as csvfile:
        writer = csv.writer(csvfile, quoting=csv.QUOTE_NONNUMERIC)
        for idx, text in idx_documents:
            vector = getLDATopics(text, cases_dict, lda)
            writer.writerow([int(idx), vector])
